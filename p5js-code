function setup() {
  createCanvas(500,500);
}

var CircleShape = function(radius){
  this.radius = radius;
};

CircleShape.prototype.draw = function() {
  noFill();
  circle(0, 0, this.radius * 2);
};

CircleShape.prototype.getVectorPnt = function(scalarPnt) {
  const angle = map(scalarPnt % 100, 0, 100, 0, TWO_PI);
  const vectorPnt = p5.Vector.fromAngle(angle + PI);
  vectorPnt.mult(this.radius);
  return vectorPnt;
};



var Visualizer = function(shape, size) {
  
  if (shape === "circle") {
    this.numPoints = size;
    this.shape = new CircleShape(size);
  } 
  
  this.factor = 0;
  
  this.redC  = random(30,200);
  this.blueC = random(30,200);
  this.redPlus = this.bluePlus = false;
  if ( random(10) < 5) { this.redPlus  = true; }
  if ( random(10) < 5) { this.bluePlus = true; }
};

Visualizer.prototype.draw = function() {
    
  var shapeColour = this.getColour();
  stroke(shapeColour);
  
  this.shape.draw();

  for (let scalarPnt = 0; scalarPnt < 100; 
       scalarPnt+=100/this.numPoints) {
    const a = this.shape.getVectorPnt(scalarPnt);
    const b = this.shape.getVectorPnt(scalarPnt * this.factor);
    
    line(a.x, a.y, b.x, b.y);    
  }
  
  this.factor += 0.015;

};

Visualizer.prototype.getColour = function() {
  
  if (this.redC >= 255){
    this.redPlus = false;
  }
  else if (this.redC <= 0) {
    this.redPlus = true;
  }
  if (this.blueC >= 255) {
    this.bluePlus = false;
  }
  else if (this.blueC <= 0) {
    this.bluePlus = true;
  }
  
  if (this.redPlus) {
    this.redC+=2;
  }
  else {
    this.redC-=2;
  }
  if (this.bluePlus) {
    this.blueC+=2;
  }
  else {
    this.blueC-=2;
  }
  
  return color(this.redC, 0, this.blueC);
}

var visualizer1 = null;
var visualizer2 = null;

function draw() {
  
  background(0);
  
  if (visualizer1 === null) {
    visualizer1 = new Visualizer("circle", 100);
  } 
  resetMatrix();
  translate (width/4, height/4);
  visualizer1.draw();

  

}
